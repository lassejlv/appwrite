/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as IndexImport } from './routes/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as LoginRecoveryImport } from './routes/login/recovery'
import { Route as AppVerifyImport } from './routes/app/verify'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => rootRoute,
} as any)

const LoginRecoveryRoute = LoginRecoveryImport.update({
  id: '/login/recovery',
  path: '/login/recovery',
  getParentRoute: () => rootRoute,
} as any)

const AppVerifyRoute = AppVerifyImport.update({
  id: '/app/verify',
  path: '/app/verify',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/app/verify': {
      id: '/app/verify'
      path: '/app/verify'
      fullPath: '/app/verify'
      preLoaderRoute: typeof AppVerifyImport
      parentRoute: typeof rootRoute
    }
    '/login/recovery': {
      id: '/login/recovery'
      path: '/login/recovery'
      fullPath: '/login/recovery'
      preLoaderRoute: typeof LoginRecoveryImport
      parentRoute: typeof rootRoute
    }
    '/app/': {
      id: '/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/register': typeof RegisterRoute
  '/app/verify': typeof AppVerifyRoute
  '/login/recovery': typeof LoginRecoveryRoute
  '/app': typeof AppIndexRoute
  '/login': typeof LoginIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/register': typeof RegisterRoute
  '/app/verify': typeof AppVerifyRoute
  '/login/recovery': typeof LoginRecoveryRoute
  '/app': typeof AppIndexRoute
  '/login': typeof LoginIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/register': typeof RegisterRoute
  '/app/verify': typeof AppVerifyRoute
  '/login/recovery': typeof LoginRecoveryRoute
  '/app/': typeof AppIndexRoute
  '/login/': typeof LoginIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/register'
    | '/app/verify'
    | '/login/recovery'
    | '/app'
    | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/register' | '/app/verify' | '/login/recovery' | '/app' | '/login'
  id:
    | '__root__'
    | '/'
    | '/register'
    | '/app/verify'
    | '/login/recovery'
    | '/app/'
    | '/login/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RegisterRoute: typeof RegisterRoute
  AppVerifyRoute: typeof AppVerifyRoute
  LoginRecoveryRoute: typeof LoginRecoveryRoute
  AppIndexRoute: typeof AppIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RegisterRoute: RegisterRoute,
  AppVerifyRoute: AppVerifyRoute,
  LoginRecoveryRoute: LoginRecoveryRoute,
  AppIndexRoute: AppIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/register",
        "/app/verify",
        "/login/recovery",
        "/app/",
        "/login/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/app/verify": {
      "filePath": "app/verify.tsx"
    },
    "/login/recovery": {
      "filePath": "login/recovery.tsx"
    },
    "/app/": {
      "filePath": "app/index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
